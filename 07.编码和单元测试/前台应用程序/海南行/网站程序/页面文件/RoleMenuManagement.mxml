<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" initialize="init()" creationComplete="doInitComplete()" width="1024" height="609" horizontalScrollPolicy="off" verticalScrollPolicy="off" xmlns:ns1="*">
<mx:Fade id="HideOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>			
	<mx:Canvas width="790" height="550"  verticalScrollPolicy="off" horizontalScrollPolicy="off" x="42" y="49">
	</mx:Canvas>
	<mx:RemoteObject id="org_service" destination="OrgFlexService"  
		result="doOrgResult(event.result)" showBusyCursor="true"   
		fault="doFault(event)">
	</mx:RemoteObject>
	<mx:RemoteObject id="role_service" destination="UserInfoRoleFlexService"  
		result="doRoleResult(event.result)" showBusyCursor="true"   
		fault="doFault(event)">
	</mx:RemoteObject>
	 <mx:Script>
	 	<![CDATA[
	 		import cn.ucans.bean.T_ROLE_INFO;
	 		
	 		import cn.ucans.bean.T_ORG_INFO;
	 		import cn.ucans.bean.T_USER_INFO;
	 		import cn.ucans.tree.TreeNode;
	 		import mx.collections.ArrayCollection;
	 		import cn.ucans.flex.FlexRequest;
	 		import cn.ucans.flex.FlexReponse;
	 		import cn.ucans.common.RegularExpression;
	 		import cn.ucans.common.DataProvider;
	 		import cn.ucans.common.ArrayFactory;
	 		
	 		private var regular:RegularExpression = new RegularExpression();
	 		private var dialog_add_user:AddUserInfoDialog = null; 
	 		private var dialog_add_role:AddRoleMenuDialog = null; 
	 		private var dialog_update_role:UpdateRoleMenuDialog = null;
	 		private var dialog_update_user:UpdateUserInfoDialog = null;
	 		private var dialog_confirm:CCSSConfirm = null;
	 		private var dialog_password_user:UserRolePanelChangePasswordDialog = null;
	 		private var dialog_fouce_change_password_user:UserRolePanelFouceChangePasswordDialog = null;
	 		
	 		private function setSelectedOrgValues(map:Object,xml_str:String):void{
				if(xml_str != null){
					var xml:XML = new XML(xml_str);
					this.OrgTree.updateSelectedItem(xml);
				}
			}
			
			private function init():void{
				this.OrgTree.click_Function = this.click_Tree_Handler;
//				var request:FlexRequest = new FlexRequest();
//				request.ope_id = 1005;
//				request.menu_id = 4;
//				request.type = 3;
//				request.org_id = this.parentApplication.LoginORG_ID;
//				request.user_id = this.parentApplication.LoginUser_ID;
//				this.org_service.doTransaction(request);
//				this.enabled = false;
				this.Canvas01.enabled = false;
				if(this.parentApplication.LoginUser_ID == "admin"){
					this.ForceChangePasswordButton.enabled = true;
				}else{
					this.ForceChangePasswordButton.enabled = false;
				}
			}
			
			public function flush():void{
				var request:FlexRequest = new FlexRequest();
				request.ope_id = 1005;
				request.menu_id = 4;
				request.type = 3;
				request.org_id = this.parentApplication.LoginORG_ID;
				request.user_id = this.parentApplication.LoginUser_ID;
				this.org_service.doTransaction(request);
				this.enabled = false;
//				CCSSAlert.showMessageDialog(this,"XXX");
			}
			
			private function click_Tree_Handler():void{
				var node_selected:TreeNode = this.OrgTree.selectNode;
				var request:FlexRequest = new FlexRequest();
				request.ope_id = 1004;
				request.menu_id = 4;
				request.type = 3;
				request.org_id = this.parentApplication.LoginORG_ID;
				request.user_id = this.parentApplication.LoginUser_ID;
				var org:T_ORG_INFO = new T_ORG_INFO();
				org.ORG_ID = node_selected.data;
				org.TOP_LEVEL = ""+(node_selected.top);
				request.form.org = org;
				this.org_service.doTransaction(request);
				this.enabled = false;
				this.doQueryHuman();
				if(node_selected.top == 0){
					this.Canvas01.enabled = true;
				}else{
					this.Canvas01.enabled = false;
				}
			}
			
			private function doInitComplete():void{
				this.OrgTree.expandSelectedNodeChildren();
				this.doQueryRole();
			}
			
			private function doAddRole():void{
				this.dialog_add_role = new AddRoleMenuDialog();
				this.dialog_add_role.showDialog(this);
				this.dialog_add_role.addEventListener(Event.REMOVED,doAddRoleHandler);
			}
			
			private function doAddRoleHandler(event:Event):void{
				if(this.dialog_add_role.DOOK){
					var request:FlexRequest = new FlexRequest();
					request.ope_id = 1014;
					request.menu_id = 4;
					request.org_id = this.parentApplication.LoginORG_ID;
					request.user_id = this.parentApplication.LoginUser_ID;
					request.form.role = this.dialog_add_role.role;
					request.form.xml = this.dialog_add_role.XMLRole;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doUpdateRole():void{
				if(this.TableGrid_Role.selectedIndex>-1){
					this.dialog_update_role = new UpdateRoleMenuDialog();
					this.dialog_update_role.showDialog(this,this.TableGrid_Role.selectedItem);
					this.dialog_update_role.addEventListener(Event.REMOVED,doUpdateRoleHandler);
				}else{
					CCSSAlert.showMessageDialog(this,"请在角色列表中选择一个角色，再进行本操作！");
					return;
				}
			}
			
			private function doUpdateRoleHandler(event:Event):void{
				if(this.dialog_update_role.DOOK){
					var request:FlexRequest = new FlexRequest();
					request.ope_id = 1015;
					request.menu_id = 4;
					request.org_id = this.parentApplication.LoginORG_ID;
					request.user_id = this.parentApplication.LoginUser_ID;
					request.form.role = this.dialog_update_role.role;
					request.form.xml = this.dialog_update_role.XMLRole;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doDeleteRole():void{
				if(this.TableGrid_Role.selectedIndex>-1){
					var item:Object = this.TableGrid_Role.selectedItem;
					if(item.ROLE_ID == "00A"){
						CCSSAlert.showMessageDialog(this,"系统保护，不能删除系统默认角色（"+item.ROLE_ID+"，"+item.ROLE_NAME+"）!");
						return;
					}else{
						var request:FlexRequest = new FlexRequest();
						request.ope_id = 1016;
						request.menu_id = 4;
						request.org_id = this.parentApplication.LoginORG_ID;
						request.user_id = this.parentApplication.LoginUser_ID;
						var role:T_ROLE_INFO = new T_ROLE_INFO();
						role.ROLE_ID = item.ROLE_ID;
						role.ROLE_NAME = item.ROLE_NAME;
						request.form.role = role;
						this.dialog_confirm = new CCSSConfirm();
						this.dialog_confirm.showDialog(this,"您确认要删除该角色（"+item.ROLE_ID+"，"+item.ROLE_NAME+"）吗？",request);
						this.dialog_confirm.addEventListener(Event.REMOVED,doDeleteRoleHandler);
					}
				}else{
					CCSSAlert.showMessageDialog(this,"请在角色列表中选择一个角色，再进行本操作！");
					return;
				}
			}
			
			private function doDeleteRoleHandler(event:Event):void{
				if(this.dialog_confirm.YES){
					var request:FlexRequest = this.dialog_confirm.object as FlexRequest;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doAddHuman():void{
				var node:TreeNode = this.OrgTree.selectNode;
				if(node == null){
					CCSSAlert.showMessageDialog(this,"请选中当前要添加人员的组织，再进行本操作！");
					return;
				}else{
					this.dialog_add_user = new AddUserInfoDialog();
					this.dialog_add_user.showDialog(this,node.data,node.label);
					this.dialog_add_user.addEventListener(Event.REMOVED,doAddHumanHandler);
				}
			}
			
			private function doAddHumanHandler(event:Event):void{
				if(this.dialog_add_user.DOOK){
					var request:FlexRequest = new FlexRequest();
					request.ope_id = 1010;
					request.menu_id = 4;
					request.org_id = this.parentApplication.LoginORG_ID;
					request.user_id = this.parentApplication.LoginUser_ID;
					request.form.user = this.dialog_add_user.user;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doUpdateHuman():void{
				if(this.TableGrid_User.selectedIndex>-1){
					this.dialog_update_user = new UpdateUserInfoDialog();
					this.dialog_update_user.showDialog(this,this.TableGrid_User.selectedItem);
					this.dialog_update_user.addEventListener(Event.REMOVED,doUpdateHumanHandler);
				}else{
					CCSSAlert.showMessageDialog(this,"请在人员列表中选中一条记录，再进行本操作！");
					return;
				}
			}
			
			private function doUpdateHumanHandler(event:Event):void{
				if(this.dialog_update_user.DOOK){
					var request:FlexRequest = new FlexRequest();
					request.ope_id = 1011;
					request.menu_id = 4;
					request.org_id = this.parentApplication.LoginORG_ID;
					request.user_id = this.parentApplication.LoginUser_ID;
					request.form.user = this.dialog_update_user.user;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doDeleteHuman():void{
				if(this.TableGrid_User.selectedIndex>-1){
					var item:Object = this.TableGrid_User.selectedItem;
					if(item.USER_ID == "admin"){
						CCSSAlert.showMessageDialog(this,"系统保护，不能删除系统管理员（"+item.USER_ID+"，"+item.USER_NAME+"）!");
						return;
					}else{
						var request:FlexRequest = new FlexRequest();
						request.ope_id = 1012;
						request.menu_id = 4;
						request.org_id = this.parentApplication.LoginORG_ID;
						request.user_id = this.parentApplication.LoginUser_ID;
						var user:T_USER_INFO = new T_USER_INFO();
						user.USER_ID = item.USER_ID;
						user.USER_NAME = item.USER_NAME;
						request.form.user = user;
						this.dialog_confirm = new CCSSConfirm();
						this.dialog_confirm.showDialog(this,"您确认要删除该人员（"+item.USER_ID+"，"+item.USER_NAME+"）吗？",request);
						this.dialog_confirm.addEventListener(Event.REMOVED,doDeleteHumanHandler);
					}					
				}else{
					CCSSAlert.showMessageDialog(this,"请在人员列表中选中一条记录，再进行本操作！");
					return;
				}
			}
			
			private function doDeleteHumanHandler(event:Event):void{
				if(this.dialog_confirm.YES){
					var request:FlexRequest = this.dialog_confirm.object as FlexRequest;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doQueryHuman():void{
				var node:TreeNode = this.OrgTree.selectNode;
				if(node == null){
					CCSSAlert.showMessageDialog(this,"请在组织树表中选中一个组织，再进行本操作！");
					return;
				}else{
					var request:FlexRequest = new FlexRequest();
					request.ope_id = 1013;
					request.menu_id = 4;
					request.org_id = this.parentApplication.LoginORG_ID;
					request.user_id = this.parentApplication.LoginUser_ID;
					var user:T_USER_INFO = new T_USER_INFO();
					user.ORG_ID = node.data;
					request.form.user = user;
					this.role_service.doTransaction(request);
					this.enabled = false;
				}
			}
			
			private function doChangePassword():void{
				if(this.TableGrid_User.selectedIndex>-1){
					var item:Object = this.TableGrid_User.selectedItem;
					this.dialog_password_user = new UserRolePanelChangePasswordDialog();
					this.dialog_password_user.showDialog(this,item.USER_ID);
				}else{
					CCSSAlert.showMessageDialog(this,"请在人员列表中选中一条记录，再进行本操作！");
					return;
				}
			}
			
			private function doQueryRole():void{
				var request:FlexRequest = new FlexRequest();
				request.ope_id = 1017;
				request.menu_id = 4;
				request.org_id = this.parentApplication.LoginORG_ID;
				request.user_id = this.parentApplication.LoginUser_ID;
				this.role_service.doTransaction(request);
				this.enabled = false;
			}
	 		
			private function doOrgResult(data:Object):void{
				this.enabled = true;
				var reponse:FlexReponse = data as FlexReponse;
				switch(reponse.ope_id){
					case 1004:
						if(reponse.sign == 0){
							var map_query:Object = reponse.result.map;
							var xml_query:String = reponse.result.xml;
							this.setSelectedOrgValues(map_query,xml_query);
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1005:
						if(reponse.sign == 0){
							var xml_org_init:String = reponse.result.xml as String;
							this.OrgTree.dataProvider = xml_org_init;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					default:
						break;				
				}
			}
			
			private function doRoleResult(data:Object):void{
				this.enabled = true;
				var reponse:FlexReponse = data as FlexReponse;
				switch(reponse.ope_id){
					case 1010:
						if(reponse.sign == 0){
							this.doQueryHuman();
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1011:
						if(reponse.sign == 0){
							var item:Object = reponse.result.map;
							this.doQueryHuman();					
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1012:
						if(reponse.sign == 0){
							this.doQueryHuman();
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1013:
						if(reponse.sign == 0){
							var arrayCollection:ArrayCollection = reponse.result.list as ArrayCollection;
							this.TableGrid_User.dataProvider = arrayCollection;
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1014:
						if(reponse.sign == 0){
							this.doQueryRole();
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1015:
						if(reponse.sign == 0){
							this.doQueryRole();
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1016:
						if(reponse.sign == 0){
							this.doQueryRole();
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1017:
						if(reponse.sign == 0){
							var collection_query:ArrayCollection = reponse.result.list as ArrayCollection;
							this.TableGrid_Role.dataProvider = collection_query;
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					case 1018:
						if(reponse.sign == 0){
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}else{
							CCSSAlert.showMessageDialog(this,reponse.message);
							return;
						}
						break;
					default:
						break;				
				}
			}
			
			private function doSTATUS(item:Object, column:DataGridColumn):String{
				return ArrayFactory.getValueFromArray(DataProvider.combobox_array_UserInfo_Status_Edit,item.STATUS);
			}
			
			private function doForceChangePassword():void{
				if(this.TableGrid_User.selectedIndex>-1){
					var item:Object = this.TableGrid_User.selectedItem;
					this.dialog_fouce_change_password_user = new UserRolePanelFouceChangePasswordDialog();
					this.dialog_fouce_change_password_user.showDialog(this,item.USER_ID);
				}else{
					CCSSAlert.showMessageDialog(this,"请在人员列表中选中一条记录，再进行本操作！");
					return;
				}
			}
			
			private function doFault(event:Event):void{
				CCSSAlert.showErrorDialog(this,event.toString());
				return;
			}
	 	]]>
	 </mx:Script>
</mx:Canvas>
